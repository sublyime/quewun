// <auto-generated />
using System;
using DataQuillDesktop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataQuillDesktop.Migrations
{
    [DbContext(typeof(QuillDbContext))]
    [Migration("20250921150510_EnhancedModbusConfiguration")]
    partial class EnhancedModbusConfiguration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("DataQuillDesktop.Models.AppConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AppConfigs");
                });

            modelBuilder.Entity("DataQuillDesktop.Models.DataPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataSourceId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DataType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Quality")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DataSourceId", "Timestamp");

                    b.ToTable("DataPoints");
                });

            modelBuilder.Entity("DataQuillDesktop.Models.DataSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("InterfaceType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProtocolType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DataSources");
                });

            modelBuilder.Entity("DataQuillDesktop.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataQuillDesktop.Models.DataPoint", b =>
                {
                    b.HasOne("DataQuillDesktop.Models.DataSource", "DataSource")
                        .WithMany()
                        .HasForeignKey("DataSourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DataSource");
                });

            modelBuilder.Entity("DataQuillDesktop.Models.DataSource", b =>
                {
                    b.OwnsOne("DataQuillDesktop.Models.DataSourceConfiguration", "Configuration", b1 =>
                        {
                            b1.Property<int>("DataSourceId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ApiKey")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("BaudRate")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("ClientId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("CustomParameters")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("DataBits")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("DefaultDataFormat")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Endpoint")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("FilePath")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("FilePattern")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Handshake")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Host")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("ModbusRegisters")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Parity")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Password")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Port")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("PortName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("RetryAttempts")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("SlaveId")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("StopBits")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("Timeout")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Topic")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<bool>("UseSSL")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("Username")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<bool>("WatchForChanges")
                                .HasColumnType("INTEGER");

                            b1.HasKey("DataSourceId");

                            b1.ToTable("DataSources");

                            b1.WithOwner()
                                .HasForeignKey("DataSourceId");
                        });

                    b.Navigation("Configuration")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
